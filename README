README FILE FOR NETSTR
=========================
LICENSE:  See COPYING in the source distribution for details.
THE NAME: '(net)work-(str)ings'
ABOUT:    netstr is a small, light and fast tool used to quickly investigate
          a network.

WHY
---
Not unlike a lot of sysadmins I have always had an interest in port scanning
for mostly good reasons. I wanna know what is on the wire. But, I also don't
need a lot of capabilities that ship with popular scanners and I wanted to
have a grasp, not expertise, of how it works. Most importantly I wanted to do
it in C and in a way that if others wanted to use the code doing so was 
relatively easy. When I say easy I don't mean the code itself (although I
try) but the entire collection of programs. The code works in a way that 
anyone could easily break off one of the program modules and use it for
something entirely different.

... this took me awhile.

But using a lot of simple ideas from a lot of different people out there I
finally started putting together the foundation for what I hope to someday
be a robust, easy to use, relatively small but efficient network utility.

FEATURES
--------
- Fast scanning 
- Tiny footprint with only one dependency (pcap) for the sniffer
- Easy to use and modify for your own systems
- A solid default portlist, supports port ranges, strobing privileged ports
  or single port scan
- Fine grained timeout support in seconds, useconds or both
- full tcpv4 connect for every port 
- Very fast packet watching capability with little tiny footprint
- ipv6 single port single host support
- Session dump capability using libpcap during scans in parallel
- Simple packet payload decoding in ascii
- ARP traffic dumping
- Passive (fuzzy... very fuzzy) tcpv4 port/host data collection

SEE ALSO: The master TODO file

CONFIGURE
---------
Not all systems support the destination directories for manual pages and
binaries, edit the top of the Makefile to change these. Not ALL OF these
have been tested.

BUILD AND INSTALL UTILITIES
---------------------------
netstr has to be built for your platform. Tested platforms for this
release are:
	linux openbsd 
platforms that should work fine are:
	netbsd darwin freebsd
* cd to where the sources are
* make `uname` or make $platform-name (e.g. linux)

For instance - NetBSD do the following:
* cd to where the sources are
* make netbsd

Run `make install` to install to /usr/local/bin.

Note that you can scan without pcap capabilities for a scanner only.
To do so run:
	make ${platform}-scan
example:
	make linux-scan

UNINSTALL
---------
Run `make uninstall` in the source directory to remove.

QUESTIONS/BRICKS
----------------
  jay.fink@gmail.com
