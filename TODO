TODO File for netstr 
--------------------------------------------------------------------------------

Release Dependent
------------------------
v0.19
 o Bug hunt

v0.20
o UDP Support for ipv4 scanning. Make sure all of the tcp scanning
  bits are in order. 

o the netstr book with examples, howtos and a source contribution guide.
  there is no api but there is a modular system that could use some explaining

o write some initial scripts and maybe even shell libs or something to get
  the ball rolling on having some sort of decent scripts for users to be
  able to get rolling with stuff faster


Not tied to a release
------------------------
o UDP Support for passive (this is super hard to test)

o Consider making the userspec timeout if it is lower than default --fast
  speedup a percentage drop of some sort. For example if userspec is 2
  and --fast is invoked (seems kind of odd) after one successful connect
  on a host drop it to 1.8 (or thereabouts) and also....

o If --fast is invoked because there could be good reasons NOT to do this,
  for any connection oriented stuff add in a method to grab the local network
  address and compare it to the remote hosts network address. If they are on
  the same network drop the useconds down to lowest possible value.

o Build in classic UNIX style options. Users don't like being forced to
  exlcusively use GNUstyle long options only. At least where it is possible.

o IPv6 Packet dumping (in all of its glory including decoding). 
  Someday this has to be done, it is a "stop kicking the can" item
  pcap can deliver these at the same time so existing code needs to
  additions to handle v6 data



EXPERIMENTAL/IDEAS
------------------------
These are skunkworks ideas. Stuff that probably will never make it in but
could be fun or have a decent enough cool factor tied to them. 

o an interpreter like some other systems have that can be interactive or fed
  scripts. Arguably, a shell is enough for scripting, but something that could
  be interactive might be cool.

o A simple timer elapse for all scanning utilitues, start, end and elapsed.
  Yes, `time netstr cmd a1 a2...` works for this and provides details but
  possibly there is more information to be discovered doing it internally

o parallel packet dumping while scanning.

o bolt on uhttpd server

o Listener, connect and concatenate support. No idea how to do these yet
  and they are major pieces of software. 

o syn support

o banner support

o portN,portN1,portN2 support

o better packet reading ident?
